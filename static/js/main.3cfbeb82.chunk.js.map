{"version":3,"sources":["TodoItemsContext.tsx","TodoItems.tsx","TodoItemForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoItemsContext","createContext","defaultState","todoItems","todoItemsDone","localStorageKey","TodoItemsContextProvider","children","useReducer","todoItemsReducer","state","dispatch","useEffect","savedState","localStorage","getItem","type","data","JSON","parse","setItem","stringify","Provider","value","useTodoItems","todoItemsContext","useContext","Error","produce","draft","action","unshift","id","Date","now","toString","Math","floor","random","title","todoItem","details","list","done","index","findIndex","splice","listName","listNameAnother","listAnother","item","startIndex","removed","endIndex","spring","damping","stiffness","duration","useTodoItemListStyles","makeStyles","root","listStyle","padding","TodoItemsList","classes","onDragEnd","result","destination","source","droppableId","provided","className","ref","innerRef","droppableProps","map","draggableId","draggableProps","dragHandleProps","motion","li","transition","layout","drag","placeholder","useTodoItemCardStyles","marginTop","marginBottom","doneRoot","textDecoration","color","TodoItemCard","handleDelete","useCallback","handleToggleDone","Card","classnames","CardHeader","IconButton","aria-label","onClick","FormControlLabel","control","Checkbox","checked","onChange","name","label","CardContent","Typography","variant","component","useInputStyles","TodoItemForm","useForm","handleSubmit","reset","watch","onSubmit","formData","defaultValue","rules","required","render","field","TextField","fullWidth","multiline","Button","disabled","theme","createMuiTheme","palette","primary","main","secondary","Content","Container","maxWidth","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.3cfbeb82.chunk.js","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useReducer } from \"react\";\nimport produce from \"immer\";\n\nexport interface TodoItem {\n  id: string;\n  title: string;\n  details?: string;\n}\n\nexport type TodoItemFormData = Omit<TodoItem, \"id\" | \"done\">;\n\ninterface TodoItemsState {\n  todoItems: TodoItem[];\n  todoItemsDone: TodoItem[];\n}\n\ntype TodoItemsAction =\n  | {\n      type: \"loadState\";\n      data: TodoItemsState;\n    }\n  | {\n      type: \"add\";\n      data: { todoItem: TodoItemFormData };\n    }\n  | {\n      type: \"delete\";\n      data: { id: string; done: boolean };\n    }\n  | {\n      type: \"toggleDone\";\n      data: { id: string; done: boolean };\n    }\n  | {\n      type: \"reorder\";\n      data: { startIndex: number; endIndex: number; done: boolean };\n    };\n\nconst TodoItemsContext = createContext<\n  (TodoItemsState & { dispatch: (action: TodoItemsAction) => void }) | null\n>(null);\n\nconst defaultState = { todoItems: [], todoItemsDone: [] };\nconst localStorageKey = \"todoListState\";\n\nexport const TodoItemsContextProvider = ({ children }: { children?: ReactNode }) => {\n  const [state, dispatch] = useReducer(todoItemsReducer, defaultState);\n\n  useEffect(() => {\n    const savedState = localStorage.getItem(localStorageKey);\n\n    if (savedState) {\n      try {\n        dispatch({ type: \"loadState\", data: JSON.parse(savedState) });\n      } catch {}\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <TodoItemsContext.Provider value={{ ...state, dispatch }}>{children}</TodoItemsContext.Provider>\n  );\n};\n\nexport const useTodoItems = () => {\n  const todoItemsContext = useContext(TodoItemsContext);\n\n  if (!todoItemsContext) {\n    throw new Error(\"useTodoItems hook should only be used inside TodoItemsContextProvider\");\n  }\n\n  return todoItemsContext;\n};\n\nconst todoItemsReducer = produce((draft: TodoItemsState, action: TodoItemsAction) => {\n  switch (action.type) {\n    case \"loadState\": {\n      return action.data;\n    }\n    case \"add\":\n      draft.todoItems.unshift({\n        id: generateId(),\n        title: action.data.todoItem.title,\n        details: action.data.todoItem.details,\n      });\n      break;\n    case \"delete\": {\n      const listName = action.data.done ? \"todoItemsDone\" : \"todoItems\";\n\n      const list = draft[listName];\n\n      const index = list.findIndex(({ id }) => id === action.data.id);\n      if (index !== -1) {\n        list.splice(index, 1);\n      }\n      break;\n    }\n    case \"toggleDone\": {\n      const listName = action.data.done ? \"todoItemsDone\" : \"todoItems\";\n      const listNameAnother = action.data.done ? \"todoItems\" : \"todoItemsDone\";\n\n      const list = draft[listName];\n      const listAnother = draft[listNameAnother];\n\n      const index = list.findIndex(({ id }) => id === action.data.id);\n      if (index !== -1) {\n        const item = list[index];\n        list.splice(index, 1);\n        listAnother.splice(1, 0, item);\n      }\n\n      break;\n    }\n    case \"reorder\": {\n      const listName = action.data.done ? \"todoItemsDone\" : \"todoItems\";\n\n      const list = draft[listName];\n\n      const [removed] = list.splice(action.data.startIndex, 1);\n      list.splice(action.data.endIndex, 0, removed);\n      break;\n    }\n\n    default:\n      throw new Error();\n  }\n});\n\nfunction generateId() {\n  return `${Date.now().toString(36)}-${Math.floor(Math.random() * 1e16).toString(36)}`;\n}\n","import { useCallback } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport classnames from \"classnames\";\nimport { motion } from \"framer-motion\";\nimport { TodoItem, useTodoItems } from \"./TodoItemsContext\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst spring = {\n  type: \"spring\",\n  damping: 25,\n  stiffness: 120,\n  duration: 0.25,\n};\n\nconst useTodoItemListStyles = makeStyles({\n  root: {\n    listStyle: \"none\",\n    padding: 0,\n  },\n});\n\nexport const TodoItemsList = function () {\n  const { todoItems, todoItemsDone, dispatch } = useTodoItems();\n  const classes = useTodoItemListStyles();\n\n  function onDragEnd(\n    result: { source: { index: number }; destination?: { index: number } },\n    done: boolean,\n  ) {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    dispatch({\n      type: \"reorder\",\n      data: {\n        startIndex: result.source.index,\n        endIndex: result.destination.index,\n        done: done,\n      },\n    });\n  }\n\n  return (\n    <>\n      <DragDropContext onDragEnd={result => onDragEnd(result, false)}>\n        <Droppable droppableId=\"list\">\n          {provided => (\n            <ul className={classes.root} ref={provided.innerRef} {...provided.droppableProps}>\n              {todoItems.map((item, index) => (\n                <Draggable draggableId={item.id} index={index} key={item.id}>\n                  {provided => (\n                    <div\n                      ref={provided.innerRef}\n                      {...(provided.draggableProps as any)}\n                      {...provided.dragHandleProps}\n                    >\n                      <motion.li transition={spring} layout={true} drag=\"y\">\n                        <TodoItemCard item={item} done={false} />\n                      </motion.li>\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </ul>\n          )}\n        </Droppable>\n      </DragDropContext>\n\n      <DragDropContext onDragEnd={result => onDragEnd(result, true)}>\n        <Droppable droppableId=\"list\">\n          {provided => (\n            <ul className={classes.root} ref={provided.innerRef} {...provided.droppableProps}>\n              {todoItemsDone.map((item, index) => (\n                <Draggable draggableId={item.id} index={index} key={item.id}>\n                  {provided => (\n                    <div\n                      ref={provided.innerRef}\n                      {...(provided.draggableProps as any)}\n                      {...provided.dragHandleProps}\n                    >\n                      <motion.li transition={spring} layout={true} drag=\"y\">\n                        <TodoItemCard item={item} done={true} />\n                      </motion.li>\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </ul>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n};\n\nconst useTodoItemCardStyles = makeStyles({\n  root: {\n    marginTop: 24,\n    marginBottom: 24,\n  },\n  doneRoot: {\n    textDecoration: \"line-through\",\n    color: \"#888888\",\n  },\n});\n\nexport const TodoItemCard = function ({ item, done }: { item: TodoItem; done: boolean }) {\n  const classes = useTodoItemCardStyles();\n  const { dispatch } = useTodoItems();\n\n  const handleDelete = useCallback(\n    () => dispatch({ type: \"delete\", data: { id: item.id, done: done } }),\n    [item.id, done, dispatch],\n  );\n\n  const handleToggleDone = useCallback(\n    () =>\n      dispatch({\n        type: \"toggleDone\",\n        data: { id: item.id, done: done },\n      }),\n    [item.id, done, dispatch],\n  );\n\n  return (\n    <Card\n      className={classnames(classes.root, {\n        [classes.doneRoot]: done,\n      })}\n    >\n      <CardHeader\n        action={\n          <IconButton aria-label=\"delete\" onClick={handleDelete}>\n            <DeleteIcon />\n          </IconButton>\n        }\n        title={\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={done}\n                onChange={handleToggleDone}\n                name={`checked-${item.id}`}\n                color=\"primary\"\n              />\n            }\n            label={item.title}\n          />\n        }\n      />\n      {item.details ? (\n        <CardContent>\n          <Typography variant=\"body2\" component=\"p\">\n            {item.details}\n          </Typography>\n        </CardContent>\n      ) : null}\n    </Card>\n  );\n};\n","import { useTodoItems, TodoItemFormData } from \"./TodoItemsContext\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useInputStyles = makeStyles(() => ({\n  root: {\n    marginBottom: 24,\n  },\n}));\n\nexport default function TodoItemForm() {\n  const classes = useInputStyles();\n  const { dispatch } = useTodoItems();\n  const { control, handleSubmit, reset, watch } = useForm();\n\n  return (\n    <form\n      onSubmit={handleSubmit((formData: TodoItemFormData) => {\n        dispatch({ type: \"add\", data: { todoItem: formData } });\n        reset({ title: \"\", details: \"\" });\n      })}\n    >\n      <Controller\n        name=\"title\"\n        control={control}\n        defaultValue=\"\"\n        rules={{ required: true }}\n        render={({ field }) => (\n          <TextField {...field} label=\"TODO\" fullWidth={true} className={classes.root} />\n        )}\n      />\n      <Controller\n        name=\"details\"\n        control={control}\n        defaultValue=\"\"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            label=\"Details\"\n            fullWidth={true}\n            multiline={true}\n            className={classes.root}\n          />\n        )}\n      />\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={!watch(\"title\")}>\n        Add\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { TodoItemsList } from \"./TodoItems\";\nimport { TodoItemsContextProvider } from \"./TodoItemsContext\";\nimport TodoItemForm from \"./TodoItemForm\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#9012fe\",\n    },\n    secondary: {\n      main: \"#b2aabf\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <TodoItemsContextProvider>\n      <ThemeProvider theme={theme}>\n        <Content />\n      </ThemeProvider>\n    </TodoItemsContextProvider>\n  );\n}\n\nfunction Content() {\n  return (\n    <Container maxWidth=\"sm\">\n      <header>\n        <Typography variant=\"h2\" component=\"h1\">\n          Todo List\n        </Typography>\n      </header>\n      <main>\n        <TodoItemForm />\n        <TodoItemsList />\n      </main>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}